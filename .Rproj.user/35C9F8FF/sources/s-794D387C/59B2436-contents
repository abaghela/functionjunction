first_five <- function(mat) {
  return(mat[1:5,1:5])
}



overlap <- function(vec1, vec2) {
  #cat("\n",
  #paste0("The overlap length is: ", length(intersect(vec1, vec2))), "\n",
  #paste0("Vec1 unique length is: ", length(setdiff(vec1, vec2))), "\n",
  #paste0("Vec2 unique length is: ", length(setdiff(vec2, vec1)))
  #)
  data.frame(
    Property = c("The overlap length is: ", "Vec1 unique length is: ", "Vec2 unique length is: " ),
    Length = c(length(intersect(vec1, vec2)), length(setdiff(vec1, vec2)), length(setdiff(vec2, vec1)) )
  ) %>% knitr::kable()
  
}


# Read in excel sheets as a list
read_excel_allsheets <- function(filename, tibble = FALSE) {
  # I prefer straight data.frames
  # but if you like tidyverse tibbles (the default with read_excel)
  # then just pass tibble = TRUE
  sheets <- readxl::excel_sheets(filename)
  x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
  if(!tibble) x <- lapply(x, as.data.frame)
  names(x) <- sheets
  x
}


# niceList returns a character vector without quotes and as a list so that it can be copy and pasted.
niceList <- function(character_vector){
  cat(noquote(as.character(character_vector)),sep="\n")
  clipr::write_clip(character_vector,breaks="\n")
}
#mart <- biomaRt::useDataset("hsapiens_gene_ensembl", biomaRt::useMart("ensembl"))

# mapStuff maps ensembl gene names to the hgnc name
#  mapStuff <- function(genes, ID) {
#   if (ID == "ensembl"){
#     geneList <- biomaRt::getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "hgnc_symbol","entrezgene_id",  "description", "gene_biotype"),values= as.character(genes),mart=mart)
#     temp <- data.frame(ensembl_gene_id= setdiff(as.character(genes), geneList$ensemble_gene_id))
#     geneList %<>% full_join(temp)
#     rm(temp)
#     geneList <- geneList[match(as.character(genes), geneList$ensembl_gene_id),]
#     return(geneList)
#   }
#   if (ID == "hgnc") {
#     geneList <- biomaRt::getBM(filters= "hgnc_symbol", attributes= c("ensembl_gene_id","hgnc_symbol", "entrezgene_id", "description"),values= as.character(genes),mart=mart)
#     temp <- data.frame(hgnc_symbol= setdiff(as.character(genes), as.character(geneList$hgnc_symbol)))
#     geneList %<>% full_join(temp)
#     rm(temp)
#     geneList <- geneList[match(as.character(genes), geneList$hgnc_symbol),]
#     return(geneList)
#   }
#    if (ID == "entrez") {
#      geneList <- biomaRt::getBM(filters= "entrezgene_id", attributes= c("ensembl_gene_id","hgnc_symbol", "entrezgene_id", "description"),values= as.integer(genes),mart=mart)
#      temp <- data.frame(entrezgene= setdiff(as.integer(genes), as.integer(geneList$entrezgene)))
#      geneList %<>% full_join(temp)
#      rm(temp)
#      geneList <- geneList[match(as.integer(genes), geneList$entrezgene),]
#      return(geneList)
#    }
# }
#geneList <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "hgnc_symbol", "description"),values=counts$Probe,mart=mart)
#temp <- data.frame(ensembl_gene_id= setdiff(counts$Probe, geneList$ensembl_gene_id))
#geneList %<>% full_join(temp)
#geneList <- geneList[match(counts$Probe, geneList$ensembl_gene_id),]


#clipboard <- function(x, sep="\t", row.names=FALSE, col.names=TRUE){
#	clipboard <- function(x, sep="\t", row.names=FALSE, col.names=TRUE){
#		con <- pipe("xclip -selection clipboard -i", open="w")
#		write.table(x, con, sep=sep, row.names=row.names, col.names=col.names)
#		close(con)
#	}
#} 

# important pathways to particular directories 

CleanDataDir <- "~/Desktop/Lab_Work/arjun_lab/Cleaned_Data/"

normalizeVST <- function(counts, meta){
  library(DESeq2)
  dds <- DESeq2::DESeqDataSetFromMatrix(countData = counts,
                                        colData = meta,
                                        design = ~ 1)
  vsd <- DESeq2::varianceStabilizingTransformation(dds, blind=TRUE)
  #transformedcounts <- assay(vsd) # must load DESeq2 for assay() to work.
  #return(transformedcounts)
  #assign("vsd", vsd, envir= .GlobalEnv)
  #assign("transformedCounts", transformedcounts, envir = .GlobalEnv)
  return(vsd)
}

RNASeqDE <- function(dds, design_name = "condition", PADJ= .05, FC= 1.5) {
  dds <- DESeq2::DESeq(dds, parallel=FALSE)
  assign("dds", dds, envir = .GlobalEnv)
  comparisons <- combn(levels(colData(dds)[[design_name]]), 2, simplify = FALSE)
  FinalResults <- list()
  
  for (i in 1:length(comparisons)) {
    res <- results(dds, contrast = c(design_name, comparisons[[i]][2], comparisons[[i]][1]))
    res %<>% as.data.frame() %>% rownames_to_column(var= "ensembl_gene_id") %>% mutate(Abs_LFC = abs(log2FoldChange)) %>% mutate(fc= sign(log2FoldChange)* 2^(Abs_LFC)) %>% filter((padj <= PADJ) & (fc >= FC | fc <= -(FC)))
    res <- res$ensembl_gene_id %>% mapStuff(ID = "ensembl") %>% right_join(res)
    
    name <- paste0(comparisons[[i]][2],"_", comparisons[[i]][1])
    FinalResults[[name]] <- res
  }
  rm(res, name)
  return(FinalResults)
}


limmaDE <- function(expr, meta, design_name = "condition") {
  design <- model.matrix(~meta$condition)
  comparisons <- 
  
  fit <- limma::lmFit(expr, design)
  fit2 <- limma::eBayes(fit)
  
  FinalResults <- list()
  
  
  return(FinalResults)
  
}



stickyNetworkProteins <- c("ENSG00000150991", "ENSG00000101076")

##### Immune Cell Deconvolution 

deconvolute <- function(counts, method){
  #data <- (limma::voom(counts, plot=FALSE))$E
  data <- counts
  gene_names <- data %>% rownames() %>% mapStuff(ID = "ensembl") 
  
  if (method == "cibersort") {
    LM22= readRDS("/mnt/analysis1/ImportantFiles/cell_deconvolution/LM22.RDS")
    gene_names <- gene_names %>% filter(hgnc_symbol %in% rownames(LM22))
    data <- data[rownames(data) %in% gene_names$ensembl_gene_id,]
    
    if (all(rownames(data) == gene_names$ensembl_gene_id) == TRUE) {
      rownames(data) <- gene_names$hgnc_symbol
      cm=intersect(rownames(data), rownames(LM22))
      CS22= EpiDISH::epidish(data[cm,], LM22[cm,], method="CBS")
      CS22$estF %>% pheatmap::pheatmap(color = colorRampPalette(c("white", "red"))(30), fontsize_row  = 7, fontsize_col = 7 )
    }
  }
  
  #### Code Maria sent me 
  
  #require("EpiDISH")
  #require("CellMix")
  #NNLS
  #AbbasGenes=readRDS("/mnt/analysis1/ImportantFiles/cell_deconvolution/AbbasGenes.RDS")
  #cm=intersect(rownames(data), rownames(AbbasGenes))
  #nnlsLM22=ged(data[cm,], AbbasGenes[cm,],'lsfit', fit = 'nnls')
  #nnlsLM22@fit@H #is a cell-type by sample matrix
  #CIBEROSRT
  #LM22=readRDS("/mnt/analysis1/ImportantFiles/cell_deconvolution/LM22.RDS")
  #cm=intersect(rownames(data), rownames(LM22))
  #CS22=epidish(data[cm,], LM22[cm,], method="CBS")
  #CS22$estF
}

#### Plot counts for multiple genes in a dds object. Still deciding if I want the option to have all plots generated on the same plot

plot_counts <- function(dds, genes){
  for (gene in genes) {
    hgnc <- mapStuff(gene, ID = "ensembl")$hgnc_symbol
    d <- DESeq2::plotCounts(dds, gene = gene, returnData = TRUE)
    d <- ggplot(d, aes(x=condition, y=count)) + 
      geom_point(position=position_jitter(w=0.1,h=0)) +
      ggtitle(paste0(hgnc, " | ", gene)) +
      theme(plot.title = element_text(hjust = 0.5))
    return(d)
  }
}

##### PCA 

plot_pca <- function(matrix, plot = TRUE){
  pca <- prcomp(t(matrix), 
                center = TRUE, 
                scale = TRUE)
  return(summary(pca))
  return(pca)
  return(factoextra::fviz_eig(pca, ncp = 15, main = 'Percentage of explained variance for 15 principle components'))
  #factoextra::fviz_pca_ind(pca,
   #            #col.ind = "cos2", # Color by the quality of representation
    #           gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
     #          repel = TRUE     # Avoid text overlapping
  #)
  autoplot(pca)
  
}

#### Read in gene lists 
gene_lists <- list(
  #"msigdb" = cogena::gmt2list("/mnt/analysis1/ImportantFiles/mSigDB_gene_sets/c7.all.v6.2.entrez.gmt") %>% unlist() %>% unique() %>% mapStuff(ID = "entrez") %>% .[["ensembl_gene_id"]] %>% na.omit(),
  "endotox" = readxl::read_xlsx("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/EndotoxinToleranceSignature_GEx.xlsx", sheet = "endotox"),
  "inflam" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/InflammatorySignature_GEx.csv"),
  "endotox31" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/Endotox31.csv"),
  "septi" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/septicyteLabSig.csv"),
  "ratio" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/ratioSig.csv"),
  "mars" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/scicluna_mars_genes.csv"),
  "swe_end" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/sweeney_endo.csv"),
  #"doubleLPS" = readRDS("../beverlie/double_LPS.RDS"),
  #"de_genes_most_sev" = read_csv("../signature_validation/de_genes_mostsevere_vs_non_sepsis.csv")
  "daven" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/davenport_endotoxinTolerance.csv"),
  "stan_mort" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/stanford_mortality_inflammatix.csv"),
  "sms" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/11geneSMSsig.txt"),
  "bacterial_viral_metascore" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/bacterial_viral_metascore.csv"),
  "imx_bvn_1" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/IMX-BVN-1.csv"),
  "ms1_fraction" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/ms1_fraction.csv"),
  "ms1_fraction_markers" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/ms1_fraction_markers.csv"),
  #"ratio_full" = read_csv("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/ratioSig_full.csv")
  "patent_1" = readxl::read_xlsx("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/EndotoxinToleranceSignature_GEx.xlsx", sheet = "patent_1"),
  "patent_2" = readxl::read_xlsx("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/EndotoxinToleranceSignature_GEx.xlsx", sheet = "patent_2"),
  "patent_3" = readxl::read_xlsx("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/EndotoxinToleranceSignature_GEx.xlsx", sheet = "patent_3"),
  "patent_4" = readxl::read_xlsx("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/EndotoxinToleranceSignature_GEx.xlsx", sheet = "patent_4"),
  "patent_5" = readxl::read_xlsx("/mnt/analysis1/ImportantFiles/Important_Gene_Lists/EndotoxinToleranceSignature_GEx.xlsx", sheet = "patent_5")
  
)
gene_lists$all <- bind_rows(gene_lists)$ensembl_gene_id %>% na.omit() %>% unique()
